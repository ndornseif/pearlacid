
import numpy as np
import copy

ROWS = 5
COLS = ROWS



def reform_matrix(g):
	m = copy.deepcopy(g)
	assert COLS == ROWS
	rank = ROWS
	pivots = 0
	rowhits = 0
	swaps = 0
	for c in range(COLS):
		if m[c][c] == 0:
			print(f"Found no one at {c},{c}")
			for r in range(c+1,ROWS):
				print(f"Checking row for one to swap: {r}")
				if m[r][c] == 1:
					print(m)
					print(f"Swapping rows: {r} and {c}")
					m[[c,r]] = m[[r,c]]
					print(m)
					swaps +=1
					break

		if m[c][c] == 1:
			hit = False
			print(f"Found one at {c},{c}")
			for r in range(c+1, ROWS):
				print(f"Checking row for one to xor: {r}")
				if m[r][c] == 1:
					print(m)
					print(f"XORING rows: {r} and {c}")
					pivots += 1
					m[r] = m[r] ^ m[c]
					print(m)
					hit = True
			if hit:
				rowhits +=1 
		if all(m[c] == np.zeros(COLS)):
			rank -= 1
			print(f"Row {c} is all zeroes. Lowering rank to {rank}")

	print("Reverse step")
	# for c in range(COLS-1,-1,-1):
	# 	if m[c][c] == 0:
	# 		print(f"Found no one at {c},{c}")
	# 		for r in range(c-1,-1,-1):
	# 			print(f"Checking row for one to swap: {r}")
	# 			if m[r][c] == 1:
	# 				print(m)
	# 				print(f"Swapping rows: {r} and {c}")
	# 				m[[c,r]] = m[[r,c]]
	# 				print(m)
	# 				swaps +=1
	# 				break

	# 	if m[c][c] == 1:
	# 		hit = False
	# 		print(f"Found one at {c},{c}")
	# 		for r in range(c-1, -1,-1):
	# 			print(f"Checking row for one to xor: {r}")
	# 			if m[r][c] == 1:
	# 				print(m)
	# 				print(f"XORING rows: {r} and {c}")
	# 				pivots += 1
	# 				m[r] = m[r] ^ m[c]
	# 				print(m)
	# 				hit = True
	# 		if hit:
	# 			rowhits +=1 
	# 	if all(m[c] == np.zeros(COLS)):
	# 		rank -= 1
	# 		print(f"Row {c} is all zeroes. Lowering rank to {rank}")
	rank2 = ROWS
	for r in m:
		if all(r == np.zeros(COLS)):
			rank2 -= 1
	print(f"final rank: {rank2}")
	print(f"provisional rank: {rank}")
	print(f"pivots: {pivots}")
	print(f"rowhits: {rowhits}")
	print(f"swaps: {swaps}")
	print(m)
	return rank2

import sympy
from sympy import Matrix
from sympy.polys.domains import GF
from sympy.polys.matrices import DomainMatrix

random_matrix = np.random.randint(2, size=(ROWS, COLS))
print(random_matrix)
reform_matrix(random_matrix)
matrix_gf2 = sympy.Matrix(random_matrix)
print(f"GF2 rank: {matrix_gf2.rank()}")
print(f"Expected rank: {np.linalg.matrix_rank(random_matrix)}")
# rm = 0
# try:
# 	while True:
# 		rm += 1
# 		random_matrix = np.random.randint(2, size=(ROWS, COLS))
# 		if reform_matrix(random_matrix) != np.linalg.matrix_rank(random_matrix):
# 			print(random_matrix)
# 			print(rm)
# 			break
			

# except KeyboardInterrupt:
# 	print(rm)


# Define the matrix over GF(2)
matrix_gf2 = sympy.Matrix([[1, 1, 1, 1, 1],
                           [0, 0, 1, 1, 1],
                           [0, 0, 0, 0, 0],
                           [0, 1, 1, 0, 0],
                           [1, 0, 1, 0, 0]])
dm = DomainMatrix.from_Matrix(matrix_gf2).convert_to(GF(2))
# Compute the rank over GF(2)
print(dm.rank())


# m = np.array([[1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0,
#         0, 1, 0, 0, 0, 0, 1, 1, 0, 0],
#        [0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
#         1, 0, 1, 1, 0, 0, 1, 1, 0, 1],
#        [0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1,
#         1, 1, 0, 1, 0, 1, 1, 0, 0, 0],
#        [0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0,
#         1, 1, 0, 1, 1, 0, 0, 1, 0, 1],
#        [0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1,
#         0, 1, 1, 0, 0, 0, 0, 1, 0, 0],
#        [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1,
#         1, 1, 1, 1, 0, 0, 0, 1, 0, 0],
#        [0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1,
#         1, 1, 1, 0, 1, 0, 1, 0, 1, 0],
#        [0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1,
#         1, 0, 0, 0, 1, 1, 1, 1, 0, 1],
#        [1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0,
#         1, 0, 1, 1, 0, 1, 0, 0, 1, 0],
#        [1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0,
#         1, 0, 1, 0, 0, 1, 0, 0, 1, 0],
#        [1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0,
#         1, 1, 0, 1, 1, 1, 1, 1, 1, 0],
#        [1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1,
#         0, 0, 0, 1, 0, 0, 0, 1, 1, 0],
#        [1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1,
#         0, 1, 0, 1, 0, 0, 0, 1, 0, 0],
#        [0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0,
#         0, 1, 0, 0, 1, 1, 1, 0, 1, 1],
#        [1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0,
#         0, 1, 1, 1, 0, 1, 1, 0, 1, 0],
#        [1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0,
#         0, 0, 1, 0, 0, 0, 1, 0, 0, 0],
#        [1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1,
#         1, 0, 1, 0, 1, 0, 1, 0, 0, 1],
#        [1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1,
#         0, 1, 1, 0, 1, 1, 1, 0, 1, 0],
#        [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0,
#         1, 1, 0, 1, 0, 0, 1, 0, 0, 0],
#        [1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1,
#         0, 0, 1, 0, 0, 0, 1, 0, 1, 1],
#        [1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1,
#         0, 0, 1, 0, 1, 0, 0, 1, 0, 1],
#        [0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0,
#         0, 1, 1, 0, 0, 0, 0, 0, 1, 0],
#        [0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0,
#         1, 0, 0, 0, 1, 0, 1, 1, 0, 0],
#        [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1,
#         1, 0, 1, 1, 0, 0, 1, 1, 0, 1],
#        [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0,
#         1, 1, 0, 0, 0, 1, 1, 0, 1, 0],
#        [1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1,
#         1, 1, 0, 1, 1, 0, 1, 0, 0, 1],
#        [1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
#         1, 0, 0, 0, 0, 1, 1, 1, 0, 0],
#        [1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1,
#         1, 0, 0, 1, 1, 1, 1, 0, 1, 1],
#        [1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0,
#         1, 1, 0, 1, 1, 1, 0, 1, 0, 1],
#        [0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1,
#         1, 1, 1, 1, 1, 1, 1, 0, 1, 1],
#        [0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0,
#         1, 1, 0, 0, 1, 1, 0, 1, 0, 0],
#        [0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1,
#         0, 1, 0, 0, 0, 1, 1, 1, 1, 1]])

# m = np.array([[0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1,
#         0, 0, 1, 0, 0, 1, 1, 1, 1, 1],
#        [1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0,
#         1, 0, 0, 0, 1, 0, 0, 0, 1, 0],
#        [1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1,
#         0, 0, 1, 0, 1, 0, 0, 1, 1, 0],
#        [0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0,
#         1, 1, 1, 1, 1, 0, 0, 1, 0, 1],
#        [0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0,
#         0, 0, 1, 0, 0, 0, 0, 0, 1, 0],
#        [1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0,
#         0, 1, 1, 0, 0, 1, 1, 0, 0, 1],
#        [0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0,
#         1, 1, 0, 1, 1, 0, 1, 0, 1, 1],
#        [1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0,
#         1, 0, 0, 0, 1, 1, 1, 1, 1, 1],
#        [0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0,
#         0, 1, 1, 0, 0, 1, 0, 1, 1, 1],
#        [1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0,
#         0, 1, 1, 1, 0, 1, 1, 0, 1, 1],
#        [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1,
#         0, 1, 1, 1, 1, 1, 1, 0, 0, 0],
#        [0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0,
#         1, 1, 1, 0, 1, 0, 1, 0, 1, 1],
#        [0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1,
#         0, 1, 1, 0, 0, 0, 0, 1, 1, 1],
#        [1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1,
#         1, 0, 1, 1, 0, 0, 1, 0, 0, 0],
#        [0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1,
#         1, 0, 1, 1, 1, 1, 1, 1, 1, 0],
#        [0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1,
#         1, 0, 1, 1, 1, 1, 0, 0, 1, 0],
#        [1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1,
#         0, 0, 0, 0, 0, 1, 0, 0, 1, 0],
#        [1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1,
#         0, 1, 0, 1, 1, 0, 0, 0, 1, 0],
#        [0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0,
#         1, 0, 0, 0, 0, 0, 1, 1, 1, 0],
#        [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1,
#         1, 0, 0, 0, 0, 1, 0, 0, 1, 1],
#        [1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0,
#         1, 0, 0, 1, 1, 1, 1, 0, 0, 0],
#        [0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0,
#         0, 1, 1, 0, 1, 1, 0, 1, 1, 0],
#        [0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1,
#         1, 0, 0, 1, 1, 1, 0, 1, 0, 0],
#        [1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0,
#         0, 0, 0, 1, 1, 0, 1, 0, 0, 0],
#        [1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0,
#         1, 0, 0, 0, 0, 0, 1, 0, 1, 0],
#        [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1,
#         0, 1, 0, 1, 0, 1, 0, 1, 0, 1],
#        [0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1,
#         0, 0, 0, 1, 1, 0, 1, 1, 0, 1],
#        [1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1,
#         0, 0, 1, 1, 0, 0, 0, 0, 0, 0],
#        [0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1,
#         1, 0, 1, 1, 1, 1, 0, 0, 1, 1],
#        [1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0,
#         0, 0, 0, 1, 1, 0, 0, 0, 0, 0],
#        [1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1,
#         0, 1, 1, 0, 0, 1, 1, 1, 1, 1],
#        [0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1,
#         1, 1, 0, 1, 0, 1, 0, 0, 0, 1]])
# print(type(np.random.randint(2, size=(ROWS, COLS))))
# print(type(m))

# print(reform_matrix(m))
# print(np.linalg.matrix_rank(m))
# print(m)
